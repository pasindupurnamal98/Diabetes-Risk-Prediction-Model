# -*- coding: utf-8 -*-
"""FDM_Processed.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FJgnAGChKdJUNkGqKJHJdJ1XD-WOs7TJ
"""

import pandas as pd 
import numpy as np
from matplotlib import pyplot as plt
import pickle as pk
from sklearn.model_selection import train_test_split


# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive

df = pd.read_csv('diabetes_012_health_indicators_updated.csv')
df = pd.DataFrame(df)


df = df.drop(['Unnamed: 0','AnyHealthcare', 'NoDocbcCost'], axis=1)


df['HighChol'].replace(['Yes', 'No'],[1, 0], inplace=True)
df['DiffWalk'].replace(['Yes', 'No'],[1, 0], inplace=True)
df['Veggies'].replace(['Yes', 'No'],[1, 0], inplace=True)
df['Fruits'].replace(['Yes', 'No'],[1, 0], inplace=True)
df['Smoker'].replace(['Yes', 'No'],[1, 0], inplace=True)
df['Sex'].replace(['male', 'female'],[1, 0], inplace=True)

# x = df.iloc[:, 1:21].values
# y = df.iloc[:, 0].values

x=df.drop("Diabetes_012", axis= 1)
y= df['Diabetes_012']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)

def naivebayes():
  
  from sklearn.naive_bayes import BernoulliNB
  from sklearn.metrics import classification_report
  from sklearn import metrics

  clf = BernoulliNB()

  # training the model on training set
  clf.fit(x_train, y_train)
  
  pk.dump(clf, open('BernoulliNB.pkl', 'wb'))

  data = {'model': clf}
  
  with open('BernoulliNB.pkl', 'wb') as file:
     pk.dump(data, file)

  # making predictions on the testing set

  y_pred = clf.predict(x_test)

  # comparing actual response values (y_test) with predicted response values (y_pred)
  # confusion_matrix(y_test, y_pred)

  # cm = confusion_matrix(y_test, y_pred, labels= clf.classes_)
  # disp = ConfusionMatrixDisplay(confusion_matrix = cm, display_labels = clf.classes_)
  # disp.plot()
  # plt.show()
 
  # print("Bernoulli Naive Bayes model accuracy(in %):", metrics.accuracy_score(y_test, y_pred)*100)

  # report=pd.DataFrame(classification_report(y_test, y_pred,output_dict=True))
  # print(report)

naivebayes()
